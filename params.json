{"name":"Sitecore.Sitemap.xml","tagline":"Sitecore module to automatically generate sitemap.xml files based on CMS content","body":"# Sitecore.Sitemap.Xml\r\nSitecore module to automatically generate sitemap.xml files based on CMS content. Tried and tested on Sitecore CMS\r\n7.0, 7.2, 7.5 and Sitecore XP8.\r\n\r\n# Installation from source\r\n5 easy steps:\r\n* Download source;\r\n* Copy in the project's /lib directory the Sitecore assemblies mentioned in the readme file;\r\n* Add the Sitemap.Xml project as an existing project in your solution;\r\n* Reference the project in your main Sitecore solution;\r\n* Edit your `web.config` to include the Sitemap.Xml IIS handler (see following section).\r\n\r\n# Changes in web.config\r\nYou need to add the Sitemap.Xml IIS handler in your `web.config` file. This needs to be done in two sections.\r\n## system.webServer\r\nIn `system.webServer/handlers`, add the following handler at the end:\r\n```xml\r\n<!-- sitemap.xml: START -->\r\n<add verb=\"GET\" path=\"sitemap.xml\" \r\n  type=\"LD.Sitemap.Xml.SitemapHandler, Sitemap.Xml\" \r\n  name=\"LD.Sitemap.Xml\"/>\r\n<!-- sitemap.xml: END -->\r\n```\r\n## system.web\r\nIn `system.web/httpHandlers`, add the following handler at the end:\r\n```xml\r\n<!-- sitemap.xml: START -->\r\n<add verb=\"GET\" path=\"sitemap.xml\" type=\"LD.Sitemap.Xml.SitemapHandler, Sitemap.Xml\"/>\r\n<!-- sitemap.xml: END -->\r\n```\r\n\r\n# Configuration\r\nThe project includes a file called `Sitemap.Xml.config` in its App_Config/Include folder. If you reference this\r\nproject in your main Sitecore solution project, then this file should be copied to your project's App_Config/Include\r\ndirectory. You can use this skeleton configuration to configure the module.\r\n\r\nThe configuration file allows for multiple managed websites. Its main node, `<sitemap>`, allows for one or more `<site>`\r\nelements, each one with a `name` required attribute, which must match the name of one of your Sitecore managed\r\nwebsites, and a combination of the elements described next. The handler indexes content under and including the\r\nitem specified as start item for the corresponding managed website.\r\n\r\n#### site/includeTemplates\r\nA list of *template* IDs. The handler's output includes managed website items whose template ID matches exactly\r\none of the IDs specified in this list. Example:\r\n\r\n```xml\r\n<site name=\"demo\">\r\n  <includeTemplates>\r\n    <template>{1C637B7D-FFBE-472B-A905-D48BB3B0BC26}</template>\r\n    <template>{E1D0BDDE-18CF-4063-A9A1-8A6C40095BFA}</template>\r\n  </includeTemplates>\r\n</site>\r\n```\r\n\r\n#### site/includeBaseTemplates\r\nA list of *template* IDs. The handler's output includes managed website items whose template ID, or one of their base\r\ntemplate IDs, matches exactly one of the IDs specified in this list. Example:\r\n\r\n```xml\r\n<site name=\"demo>\r\n  <includeBaseTemplates>\r\n    <template>{7F91172F-22AB-404E-AF61-AD64E0BA1DF4}</template>\r\n  </includeBaseTemplates>\r\n</site>\r\n```\r\n**Caveat: you should make sure that your ContentSearch index indexes all item templates. See the section on default\r\nbehavior and extensibility, below.**\r\n\r\n#### site/excludeItems\r\nA list of *item* IDs. The handler's output excludes managed website items whose item IDs match exactly one of\r\nthe IDs specified in this list, even if their template IDs match one of the IDs in the previous configuration\r\nnodes. Example:\r\n\r\n```xml\r\n<site name=\"demo\">\r\n  <excludeItems>\r\n    <item>{0790EAB8-466F-46CA-B29C-49D10505AC2E}</item>\r\n  </excludeItems>\r\n</site>\r\n```\r\n\r\n# Default behavior and extensibility\r\nThe handler produces its output by executing a pipeline, also defined in `Sitemap.Xml.config`,\r\ncalled `createSitemapXml`. The pipeline consisits of a single pipeline processor, which provides you with default\r\nbehavior, i.e. it knows how to read and make sense of the configuration documented in the previous\r\nsection. \r\n\r\n## Default behavior\r\nTo produce its output it uses ContentSearch to fetch the items that conform to the template/item\r\nrestrictions you have configured. The pipeline processor is defined in `Sitemap.Xml.config` as follows:\r\n\r\n```xml\r\n<pipelines>\r\n  <createSitemapXml>\r\n    <processor type=\"LD.Sitemap.Xml.Pipelines.DefaultSitemapXmlProcessor, Sitemap.Xml\">\r\n      <param desc=\"The index to use (leave empty to use default index)\"></param>\r\n    </processor>\r\n  </createSitemapXml>\r\n</pipelines>\r\n```\r\nThe parameter to the pipeline processor specifies the ContentSearch index to use. If you leave it blank (as in\r\nthe example configuration), it will default to the index resolved by the `contentSearch.getContextIndex`\r\npipeline for the managed website's start item. *In any case, should you choose to index items by using restrictions\r\non their base template, you should configure your ContentSearch indexes such that they include all templates\r\n(in the `_temaplates` index field)*, i.e.:\r\n\r\n```xml\r\n<fields hint=\"raw:AddComputedIndexField\">\r\n  <!-- other computed index fields here... -->\r\n  <field fieldName=\"_templates\" storageType=\"yes\" indexType=\"untokenized\">\r\n    Sitecore.ContentSearch.ComputedFields.AllTemplates, Sitecore.ContentSearch\r\n  </field>\r\n</fields>\r\n```\r\n\r\n## Extending the pipeline\r\nYou may choose to customize the pipeline by adding to it one or more pipeline processors that you write, or\r\nindeed replace the default processor entirely. This could be because you do not wish to use ContentSearch, or\r\nbecause you may want to index items from sources other than the Sitecore content tree. If you choose to write\r\nyour own pipeline processor, it should inherit from `LD.Sitemap.Xml.Pipelines.CreateSitemapXmlProcessor`\r\n(in the `Sitemap.Xml` assembly) and override the `Process(CreateSitemapXmlArgs)` method. Once you inherit this\r\nclass, you will have the `Configuration` property available to you, which is a `Dictionary<string, SiteDefinition>`\r\ncontaining the configuration for each managed template (i.e. three properties: `IncludedTemplates`;\r\n`IncludedBaseTemplates`; and `ExcludedItems`, which are all `List<string>` containing the configured IDs).\r\n\r\nIn your `Process()` method, you are required to add to the `args.Nodes` list, which is a list of `UrlDefinition`.\r\n`UrlDefinition`s consist of a `string` that corresponds to a URL, and a `DateTime` corresponding to the last\r\nmodified date/time. The elements you add to this list are added to the final sitemap.xml output.\r\n","google":"UA-66630127-1","note":"Don't delete this file! It's used internally to help with page regeneration."}